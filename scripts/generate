#!/usr/bin/env node
const fs = require("fs");
const path = require("path");
const config = require("../ligma.config");
const dsa = require("./dsa");


const src_path = path.join(__dirname, "..", "src");
let day = 1;
let dsa_group = [];

// Process the args
try {
    if (process.argv.length === 2) { // "yarn generate"
        throw new Error("backwards compatability mode");
    }

    if (process.argv[2] === "--help" || process.argv[2] === "-h") {
        console.log(`usage: yarn generate [INT] [categories...]`)
        console.log(`possible categories are: ${Object.getOwnPropertyNames(config).join(' ')}\n`);
        return;
    }

    // combine all the lists requested
    for (let i = 3; i < process.argv.length; ++i) {
        const arg_array = config[process.argv[i]];
        if (arg_array !== undefined) {
            dsa_group = [].concat(dsa_group, arg_array);
        }
    }

    // If there are no algorithms, use the default.
    if (dsa_group.length === 0) {
        dsa_group = config.dsa;
    }

    // Shuffle the lists and select N katas for the day
    const count = process.argv[2];
    const n = Math.min(count, dsa_group.length);
    const random_dsa = shuffle(dsa_group);
    dsa_group = random_dsa.slice(0, n);
} catch (e) {
    console.log(e.message);
    dsa_group = config.dsa;
}

// sorting algorithm from stack overflow
function shuffle(array) {
    let currentIndex = array.length,  randomIndex;

    // While there remain elements to shuffle.
    while (currentIndex != 0) {

        // Pick a remaining element.
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // And swap it with the current element.
        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex], array[currentIndex]];
    }

    return array;
}

try {
    day = +fs.readdirSync(src_path).
        filter(i => i.includes("day")).
        sort((a, b) => {
            return +b.substring(3) - a.substring(3);
        })[0].substring(3) + 1;

    if (isNaN(day)) {
        console.log("day is nan");
        day = 1;
    }
} catch (e) {
    day = 1;
}

const day_name = `day${day}`;
const day_path = path.join(src_path, day_name);
const relative_day_path = path.relative(process.cwd(), day_path);
try { fs.unlinkSync(day_path); } catch (e) { }
try { fs.mkdirSync(day_path); } catch (e) { }

function generate_method(method) {
    return `${method.name}(${method.args || ""}): ${method.return || "void"} {
    }`;
}

function generate_property(prop) {
    return `${prop.scope} ${prop.name}: ${prop.type};`
}

function generate_getter(getter) {
    return `get ${getter.name}(): ${getter.return} {
        return this.${getter.prop_name};
    }`
}

function create_class(name, item) {
    fs.writeFileSync(path.join(day_path, `${name}.ts`), `export default class ${name}${item.generic || ""} {
    ${(item.properties || []).map(generate_property).join("\n\n    ")}
    ${(item.getters || []).map(generate_getter).join("\n\n    ")}
    constructor() {
    }

    ${(item.methods || []).map(generate_method).join("\n\n    ")}
}`);
}

function create_function(name, item) {
    const g = item.generic ? item.generic : "";
    fs.writeFileSync(path.join(day_path, `${name}.ts`), `export default function ${item.fn}${g}(${item.args}): ${item.return} {

}`);
}

dsa_group.forEach(ds => {
    const item = dsa[ds];
    if (!item) {
        throw new Error(`algorithm ${ds} could not be found`);
    }
    if (item.type === "class") {
        create_class(ds, item);
    } else {
        create_function(ds, item);
    }
});

const align = require("./align-configs");
align.jest(day_name);
align.ts_config(day_name);
align.package_json(config, relative_day_path);
align.stats(config, day_path);

